import logging
import asyncio
import random
import aiohttp
import json
import os
from datetime import datetime
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7477794349:AAGQ6A1R9VY-M1HbpoxISKNyqjyt6xiKMYw"
CITIES_FILE = "cities.txt"
FAKE_CITIES = ["–ö–≤–∞–Ω—Ç–æ–≥—Ä–∞–¥", "–ù–µ–π—Ä–æ—Å–±—É—Ä–≥", "–ö–∏–±–µ—Ä–ø–æ–ª–∏—Å", "–ê–ª–≥–æ—Ä–∏—Ç–º—Å–∫", "–î–∞—Ç–æ–≥—Ä–∞–¥"]
MAX_CITIES_IN_GAME = 200

class GameModes:
    SINGLE = "single"
    MULTI = "multi"

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
def load_cities() -> List[str]:
    default_cities = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
        "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂", "–í–æ–ª–≥–æ–≥—Ä–∞–¥"
    ]
    if os.path.exists(CITIES_FILE):
        try:
            with open(CITIES_FILE, encoding="utf-8") as f:
                cities = [line.strip() for line in f if line.strip()]
                return list(set(cities + default_cities))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
            return default_cities
    return default_cities

CITIES = load_cities()

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
DIFFICULTIES = {
    "easy": {
        "name": "üë∂ –õ–µ–≥–∫–∏–π",
        "time": 60,
        "hints": True,
        "cheat_chance": 0,
        "description": "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –±–æ—Ç –Ω–µ –º—É—Ö–ª—é–µ—Ç"
    },
    "medium": {
        "name": "üí™ –°—Ä–µ–¥–Ω–∏–π",
        "time": 45,
        "hints": False,
        "cheat_chance": 0,
        "description": "–ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"
    },
    "hard": {
        "name": "üî• –°–ª–æ–∂–Ω—ã–π",
        "time": 30,
        "hints": False,
        "cheat_chance": 0.05,
        "description": "–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥—Å—É–Ω—É—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥ (5% —à–∞–Ω—Å)"
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
class GameState(StatesGroup):
    MAIN_MENU = State()
    CHOOSING_MODE = State()
    CHOOSING_DIFFICULTY = State()
    WAITING_PLAYER = State()
    PLAYING_SINGLE = State()
    PLAYING_MULTI = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, Dict[str, Any]] = {}
user_stats: Dict[int, Dict[str, int]] = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def get_last_letter(city: str) -> str:
    bad_letters = ["—å", "—ã", "–π", "—ä", "—ë"]
    last_char = city[-1].lower()
    return city[-2].lower() if last_char in bad_letters else last_char

async def get_wiki_info(city: str) -> str:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://ru.wikipedia.org/api/rest_v1/page/summary/{city}",
                timeout=3
            ) as resp:
                data = await resp.json()
                return data.get("extract", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"

def generate_fake_info(city: str) -> str:
    facts = [
        f"{city} –æ—Å–Ω–æ–≤–∞–Ω –≤ {random.randint(10, 21)} –≤–µ–∫–µ",
        f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~{random.randint(50, 500)} —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫",
        f"–ò–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º {random.choice(['—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º', '–º–µ—Ç—Ä–æ', '–ø–∞—Ä–∫–æ–º'])}",
        f"–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {random.choice(['–±–∞—à–Ω—è', '–º–æ—Å—Ç', '–º—É–∑–µ–π'])}"
    ]
    return random.choice(facts)

def create_fake_city() -> str:
    prefixes = ["–ù–æ–≤–æ", "–í–µ—Ä—Ö–Ω–µ", "–ù–∏–∂–Ω–µ", "–°—Ç–∞—Ä–æ", "–ë–µ–ª–æ"]
    suffixes = ["–≥—Ä–∞–¥", "–±—É—Ä–≥", "–ø–æ–ª—å", "–¥–æ–Ω—Å–∫", "–≥–æ—Ä—Å–∫"]
    return random.choice(prefixes) + random.choice(suffixes)

def update_stats(user_id: int, win: bool):
    stats = user_stats.setdefault(user_id, {"wins": 0, "losses": 0})
    if win:
        stats["wins"] += 1
    else:
        stats["losses"] += 1

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞")
    builder.button(text="üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="‚Ñπ –ü–æ–º–æ—â—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def difficulty_kb() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for diff in DIFFICULTIES.values():
        builder.button(text=diff["name"])
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def game_kb(hints: bool = False) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üè≥ –°–¥–∞—Ç—å—Å—è")
    if hints:
        builder.button(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
    builder.button(text="‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?")
    return builder.as_markup(resize_keyboard=True)

def hint_kb(letter: str, cities: List[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in cities[:5]:
        builder.button(text=city, callback_data=f"hint_{city}")
    return builder.as_markup()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(GameState.MAIN_MENU)
    await message.answer(
        "üèô <b>–ò–≥—Ä–∞ –≤ –ì–æ—Ä–æ–¥–∞</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –ù–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
        "2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞\n"
        "3. –í —Å–ª–æ–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –º–æ–∂–µ—Ç '–º—É—Ö–ª–µ–≤–∞—Ç—å'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=main_menu_kb()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞")
async def singleplayer_mode(message: Message, state: FSMContext):
    await state.set_state(GameState.CHOOSING_DIFFICULTY)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=difficulty_kb()
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
async def multiplayer_mode(message: Message, state: FSMContext):
    await state.set_state(GameState.WAITING_PLAYER)
    await message.answer(
        "üë• <b>–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ @username –∏–ª–∏ ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "–ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    stats = user_stats.get(message.from_user.id, {"wins": 0, "losses": 0})
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ü–æ–±–µ–¥: {stats['wins']}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']}\n"
        f"üèô –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {len(CITIES)}",
        reply_markup=main_menu_kb()
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
        "1. –ù–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
        "2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞\n"
        "3. –í —Å–ª–æ–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –º–æ–∂–µ—Ç '–º—É—Ö–ª–µ–≤–∞—Ç—å'\n\n"
        "<b>–†–µ–∂–∏–º—ã –∏–≥—Ä—ã:</b>\n"
        "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è - –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞\n"
        "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üè≥ –°–¥–∞—Ç—å—Å—è - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥? - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ"
    )
    await message.answer(help_text, reply_markup=main_menu_kb())

@dp.message(StateFilter(GameState.CHOOSING_DIFFICULTY))
async def set_difficulty(message: Message, state: FSMContext):
    diff_name = next(
        (k for k, v in DIFFICULTIES.items() if v["name"] == message.text),
        None
    )
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(GameState.MAIN_MENU)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return
    if not diff_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
    user_id = message.from_user.id
    user_sessions[user_id] = {
        "mode": GameModes.SINGLE,
        "difficulty": diff_name,
        "used": [],
        "score": {"player": 0, "bot": 0},
        "last_move": datetime.now(),
        "cheated": False,
        "turn_count": 0
    }
    city = random.choice(CITIES)
    user_sessions[user_id]["used"].append(city)
    user_sessions[user_id]["score"]["bot"] += 1
    await state.set_state(GameState.PLAYING_SINGLE)
    await message.answer(
        f"üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Ä–æ–≤–µ–Ω—å: <b>{DIFFICULTIES[diff_name]['name']}</b>\n"
        f"{DIFFICULTIES[diff_name]['description']}\n\n"
        f"üèô –ú–æ–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n"
        f"üìå –í–∞–º –Ω–∞ –±—É–∫–≤—É: <b>{get_last_letter(city).upper()}</b>\n"
        f"‚è≥ –£ –≤–∞—Å {DIFFICULTIES[diff_name]['time']} —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥",
        reply_markup=game_kb(DIFFICULTIES[diff_name]["hints"])
    )

@dp.message(StateFilter(GameState.PLAYING_SINGLE))
async def game_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    session["last_move"] = datetime.now()
    session["turn_count"] += 1
    if message.text == "üè≥ –°–¥–∞—Ç—å—Å—è":
        await end_single_game(user_id, "–í—ã —Å–¥–∞–ª–∏—Å—å")
        await state.set_state(GameState.MAIN_MENU)
        return
    if message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞" and DIFFICULTIES[session["difficulty"]]["hints"]:
        last_letter = get_last_letter(session["used"][-1])
        available = [c for c in CITIES if c[0].lower() == last_letter and c not in session["used"]]
        if available:
            await message.answer(
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
                reply_markup=hint_kb(last_letter, available)
            )
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫")
        return
    if message.text == "‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?":
        if not session["used"]:
            await message.answer("–ï—â–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
            return
        last_city = session["used"][-1]
        if session["cheated"] and last_city in FAKE_CITIES:
            info = generate_fake_info(last_city)
            await message.answer(
                f"üìñ {last_city}\n{info}\n\n"
                "‚ö† –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–§–µ–π–∫</b>"
            )
        else:
            info = await get_wiki_info(last_city)
            await message.answer(f"üìñ {last_city}\n{info}")
        return
    if message.text.lower() in ["—Ñ–µ–π–∫", "–æ–±–º–∞–Ω"]:
        if session.get("cheated", False):
            await message.answer(
                "üéâ –í—ã –ø–æ–π–º–∞–ª–∏ –±–æ—Ç–∞ –Ω–∞ –æ–±–º–∞–Ω–µ! –ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!\n"
                f"–§–µ–π–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥: <b>{session['used'][-1]}</b>",
                reply_markup=main_menu_kb()
            )
            update_stats(user_id, True)
            await state.set_state(GameState.MAIN_MENU)
        else:
            await message.answer("–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É")
        return
    city = message.text.strip().capitalize()
    last_city = session["used"][-1]
    required_letter = get_last_letter(last_city)
    if city in session["used"]:
        await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª!")
        return
    if city[0].lower() != required_letter:
        await message.answer(f"–ù—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>{required_letter.upper()}</b>!")
        return
    if city not in CITIES and city not in FAKE_CITIES:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞!")
        return
    session["used"].append(city)
    session["score"]["player"] += 1
    if len(session["used"]) >= MAX_CITIES_IN_GAME:
        await end_single_game(user_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤")
        await state.set_state(GameState.MAIN_MENU)
        return
    last_letter = get_last_letter(city)
    available = [c for c in CITIES if c not in session["used"] and c[0].lower() == last_letter]
    if (random.random() < DIFFICULTIES[session["difficulty"]]["cheat_chance"] and session["turn_count"] > 3):
        fake_city = create_fake_city()
        available.append(fake_city)
        session["cheated"] = True
    if not available:
        await message.answer(
            "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –£ –º–µ–Ω—è –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É.\n"
            f"üìä –°—á–µ—Ç: {session['score']['player']}-{session['score']['bot']}",
            reply_markup=main_menu_kb()
        )
        update_stats(user_id, True)
        await state.set_state(GameState.MAIN_MENU)
        return
    bot_city = random.choice(available)
    session["used"].append(bot_city)
    session["score"]["bot"] += 1
    await message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{city}</b>\n"
        f"ü§ñ –ú–æ–π –≥–æ—Ä–æ–¥: <b>{bot_city}</b>\n"
        f"üìå –í–∞–º –Ω–∞ –±—É–∫–≤—É: <b>{get_last_letter(bot_city).upper()}</b>\n\n"
        f"üìä –°—á–µ—Ç: –í—ã {session['score']['player']} - {session['score']['bot']} –ë–æ—Ç",
        reply_markup=game_kb(DIFFICULTIES[session["difficulty"]]["hints"])
    )

async def end_single_game(user_id: int, reason: str):
    session = user_sessions.get(user_id)
    if not session:
        return
    await bot.send_message(
        user_id,
        f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: {reason}\n"
        f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {session['score']['player']} - {session['score']['bot']}",
        reply_markup=main_menu_kb()
    )
    update_stats(user_id, False)
    user_sessions.pop(user_id, None)

# --- Fallback handler (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫) ---
@dp.message()
async def fallback_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    await message.answer(
        f"–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.\n"
        f"–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: <code>{current_state}</code>\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode="HTML"
    )
    logger.info(
        f"Unhandled message from {message.from_user.id} "
        f"in state={current_state}: {message.text}"
    )

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
