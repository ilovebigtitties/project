import logging
import asyncio
import random
import aiohttp
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7477794349:AAGQ6A1R9VY-M1HbpoxISKNyqjyt6xiKMYw" 
CITIES_FILE = "cities.txt"
FAKE_CITIES = ["–ö–≤–∞–Ω—Ç–æ–≥—Ä–∞–¥", "–ù–µ–π—Ä–æ—Å–±—É—Ä–≥", "–ö–∏–±–µ—Ä–ø–æ–ª–∏—Å", "–ê–ª–≥–æ—Ä–∏—Ç–º—Å–∫", "–î–∞—Ç–æ–≥—Ä–∞–¥"]
MAX_CITIES_IN_GAME = 200  # –õ–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ

class GameModes:
    SINGLE = "single"
    MULTI = "multi"

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
def load_cities() -> List[str]:
    default_cities = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
        "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂", "–í–æ–ª–≥–æ–≥—Ä–∞–¥"
    ]
    
    if os.path.exists(CITIES_FILE):
        try:
            with open(CITIES_FILE, encoding="utf-8") as f:
                cities = [line.strip() for line in f if line.strip()]
                return list(set(cities + default_cities))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
            return default_cities
    return default_cities

CITIES = load_cities()

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
DIFFICULTIES = {
    "easy": {
        "name": "üë∂ –õ–µ–≥–∫–∏–π",
        "time": 60,
        "hints": True,
        "cheat_chance": 0,
        "description": "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –±–æ—Ç –Ω–µ –º—É—Ö–ª—é–µ—Ç"
    },
    "medium": {
        "name": "üí™ –°—Ä–µ–¥–Ω–∏–π",
        "time": 45,
        "hints": False,
        "cheat_chance": 0,
        "description": "–ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"
    },
    "hard": {
        "name": "üî• –°–ª–æ–∂–Ω—ã–π",
        "time": 30,
        "hints": False,
        "cheat_chance": 0.05,
        "description": "–ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥—Å—É–Ω—É—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥ (5% —à–∞–Ω—Å)"
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
class GameState(StatesGroup):
    MAIN_MENU = State()
    CHOOSING_MODE = State()
    CHOOSING_DIFFICULTY = State()
    WAITING_PLAYER = State()
    PLAYING_SINGLE = State()
    PLAYING_MULTI = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher(storage=storage)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, Dict[str, Any]] = {}
active_games: Dict[str, Dict[str, Any]] = {}
user_stats: Dict[int, Dict[str, int]] = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def get_last_letter(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É (–∏—Å–∫–ª—é—á–∞—è '—å', '—ã' –∏ –¥—Ä.)"""
    bad_letters = ["—å", "—ã", "–π", "—ä", "—ë"]
    last_char = city[-1].lower()
    return city[-2].lower() if last_char in bad_letters else last_char

async def get_wiki_info(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://ru.wikipedia.org/api/rest_v1/page/summary/{city}",
                timeout=3
            ) as resp:
                data = await resp.json()
                return data.get("extract", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"

def generate_fake_info(city: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    facts = [
        f"{city} –æ—Å–Ω–æ–≤–∞–Ω –≤ {random.randint(10, 21)} –≤–µ–∫–µ",
        f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~{random.randint(50, 500)} —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫",
        f"–ò–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º {random.choice(['—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º', '–º–µ—Ç—Ä–æ', '–ø–∞—Ä–∫–æ–º'])}",
        f"–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {random.choice(['–±–∞—à–Ω—è', '–º–æ—Å—Ç', '–º—É–∑–µ–π'])}"
    ]
    return random.choice(facts)

def create_fake_city() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    prefixes = ["–ù–æ–≤–æ", "–í–µ—Ä—Ö–Ω–µ", "–ù–∏–∂–Ω–µ", "–°—Ç–∞—Ä–æ", "–ë–µ–ª–æ"]
    suffixes = ["–≥—Ä–∞–¥", "–±—É—Ä–≥", "–ø–æ–ª—å", "–¥–æ–Ω—Å–∫", "–≥–æ—Ä—Å–∫"]
    return random.choice(prefixes) + random.choice(suffixes)

def is_valid_city(city: str, last_letter: str, used_cities: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞"""
    return (city in CITIES or city in FAKE_CITIES) and city not in used_cities and city[0].lower() == last_letter.lower()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞")
    builder.button(text="üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="‚Ñπ –ü–æ–º–æ—â—å")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def difficulty_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    builder = ReplyKeyboardBuilder()
    for diff in DIFFICULTIES.values():
        builder.button(text=diff["name"])
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def game_kb(hints: bool = False) -> ReplyKeyboardMarkup:
    """–ò–≥—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üè≥ –°–¥–∞—Ç—å—Å—è")
    if hints:
        builder.button(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
    builder.button(text="‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?")
    return builder.as_markup(resize_keyboard=True)

def hint_kb(letter: str, cities: List[str]) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    for city in cities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        builder.button(text=city, callback_data=f"hint_{city}")
    return builder.as_markup()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(GameState.MAIN_MENU)
    await message.answer(
        "üèô <b>–ò–≥—Ä–∞ –≤ –ì–æ—Ä–æ–¥–∞</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –ù–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
        "2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞\n"
        "3. –í —Å–ª–æ–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –º–æ–∂–µ—Ç '–º—É—Ö–ª–µ–≤–∞—Ç—å'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=main_menu_kb(),
        parse_mode="HTML"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞")
async def singleplayer_mode(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã"""
    await state.set_state(GameState.CHOOSING_DIFFICULTY)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=difficulty_kb()
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
async def multiplayer_mode(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞"""
    await state.set_state(GameState.WAITING_PLAYER)
    await message.answer(
        "üë• <b>–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ @username –∏–ª–∏ ID –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "–ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    stats = user_stats.get(message.from_user.id, {"wins": 0, "losses": 0})
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ü–æ–±–µ–¥: {stats['wins']}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']}\n"
        f"üèô –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {len(CITIES)}",
        reply_markup=main_menu_kb(),
        parse_mode="HTML"
    )

@dp.message(StateFilter(GameState.MAIN_MENU), lambda m: m.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
        "1. –ù–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
        "2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞\n"
        "3. –í —Å–ª–æ–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –º–æ–∂–µ—Ç '–º—É—Ö–ª–µ–≤–∞—Ç—å'\n\n"
        "<b>–†–µ–∂–∏–º—ã –∏–≥—Ä—ã:</b>\n"
        "üéÆ –û–¥–∏–Ω–æ—á–Ω–∞—è - –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞\n"
        "üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä - –∏–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üè≥ –°–¥–∞—Ç—å—Å—è - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥? - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ"
    )
    await message.answer(help_text, reply_markup=main_menu_kb(), parse_mode="HTML")

@dp.message(StateFilter(GameState.CHOOSING_DIFFICULTY))
async def set_difficulty(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã"""
    diff_name = next(
        (k for k, v in DIFFICULTIES.items() if v["name"] == message.text),
        None
    )
    
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(GameState.MAIN_MENU)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return
    
    if not diff_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
    
    user_id = message.from_user.id
    user_sessions[user_id] = {
        "mode": GameModes.SINGLE,
        "difficulty": diff_name,
        "used": [],
        "score": {"player": 0, "bot": 0},
        "last_move": datetime.now(),
        "cheated": False,
        "turn_count": 0
    }
    
    # –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –±–æ—Ç–∞
    city = random.choice(CITIES)
    user_sessions[user_id]["used"].append(city)
    user_sessions[user_id]["score"]["bot"] += 1
    
    await state.set_state(GameState.PLAYING_SINGLE)
    await message.answer(
        f"üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Ä–æ–≤–µ–Ω—å: <b>{DIFFICULTIES[diff_name]['name']}</b>\n"
        f"{DIFFICULTIES[diff_name]['description']}\n\n"
        f"üèô –ú–æ–π –≥–æ—Ä–æ–¥: <b>{city}</b>\n"
        f"üìå –í–∞–º –Ω–∞ –±—É–∫–≤—É: <b>{get_last_letter(city).upper()}</b>\n"
        f"‚è≥ –£ –≤–∞—Å {DIFFICULTIES[diff_name]['time']} —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥",
        reply_markup=game_kb(DIFFICULTIES[diff_name]["hints"]),
        parse_mode="HTML"
    )

@dp.message(StateFilter(GameState.PLAYING_SINGLE))
async def game_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä–µ"""
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    
    if not session:
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
    session["last_move"] = datetime.now()
    session["turn_count"] += 1
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if message.text == "üè≥ –°–¥–∞—Ç—å—Å—è":
        await end_single_game(user_id, "–í—ã —Å–¥–∞–ª–∏—Å—å")
        await state.set_state(GameState.MAIN_MENU)
        return
    
    if message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞" and DIFFICULTIES[session["difficulty"]]["hints"]:
        last_letter = get_last_letter(session["used"][-1])
        available = [c for c in CITIES 
                    if c[0].lower() == last_letter
                    and c not in session["used"]]
        if available:
            await message.answer(
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
                reply_markup=hint_kb(last_letter, available)
            )
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫")
        return
    
    if message.text == "‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?":
        if not session["used"]:
            await message.answer("–ï—â–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
            return
        
        last_city = session["used"][-1]
        if session["cheated"] and last_city in FAKE_CITIES:
            info = generate_fake_info(last_city)
            await message.answer(
                f"üìñ {last_city}\n{info}\n\n"
                "‚ö† –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–§–µ–π–∫</b>",
                parse_mode="HTML"
            )
        else:
            info = await get_wiki_info(last_city)
            await message.answer(f"üìñ {last_city}\n{info}")
        return
    
    if message.text.lower() in ["—Ñ–µ–π–∫", "–æ–±–º–∞–Ω"]:
        if session.get("cheated", False):
            await message.answer(
                "üéâ –í—ã –ø–æ–π–º–∞–ª–∏ –±–æ—Ç–∞ –Ω–∞ –æ–±–º–∞–Ω–µ! –ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!\n"
                f"–§–µ–π–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥: <b>{session['used'][-1]}</b>",
                reply_markup=main_menu_kb(),
                parse_mode="HTML"
            )
            update_stats(user_id, True)
            await state.set_state(GameState.MAIN_MENU)
        else:
            await message.answer("–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    city = message.text.strip().capitalize()
    last_city = session["used"][-1]
    required_letter = get_last_letter(last_city)
    
    if city in session["used"]:
        await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª!")
        return
        
    if city[0].lower() != required_letter:
        await message.answer(f"–ù—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>{required_letter.upper()}</b>!", parse_mode="HTML")
        return
        
    if city not in CITIES and city not in FAKE_CITIES:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞!")
        return
    
    # –•–æ–¥ –ø—Ä–∏–Ω—è—Ç
    session["used"].append(city)
    session["score"]["player"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –≥–æ—Ä–æ–¥–∞)
    if len(session["used"]) >= MAX_CITIES_IN_GAME:
        await end_single_game(user_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤")
        await state.set_state(GameState.MAIN_MENU)
        return
    
    # –•–æ–¥ –±–æ—Ç–∞
    last_letter = get_last_letter(city)
    available = [c for c in CITIES 
                if c not in session["used"] 
                and c[0].lower() == last_letter]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–µ—Ñ (–Ω–∞ —Å–ª–æ–∂–Ω–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ—Å–ª–µ 3 —Ö–æ–¥–æ–≤)
    if (random.random() < DIFFICULTIES[session["difficulty"]]["cheat_chance"] 
            and session["turn_count"] > 3):
        fake_city = create_fake_city()
        available.append(fake_city)
        session["cheated"] = True
    
    if not available:
        await message.answer(
            "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –£ –º–µ–Ω—è –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É.\n"
            f"üìä –°—á–µ—Ç: {session['score']['player']}-{session['score']['bot']}",
            reply_markup=main_menu_kb()
        )
        update_stats(user_id, True)
        await state.set_state(GameState.MAIN_MENU)
        return
    
    bot_city = random.choice(available)
    session["used"].append(bot_city)
    session["score"]["bot"] += 1
    
    await message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{city}</b>\n"
        f"ü§ñ –ú–æ–π –≥–æ—Ä–æ–¥: <b>{bot_city}</b>\n"
        f"üìå –í–∞–º –Ω–∞ –±—É–∫–≤—É: <b>{get_last_letter(bot_city).upper()}</b>\n\n"
        f"üìä –°—á–µ—Ç: –í—ã {session['score']['player']} - {session['score']['bot']} –ë–æ—Ç",
        reply_markup=game_kb(DIFFICULTIES[session["difficulty"]]["hints"]),
        parse_mode="HTML"
    )

# --- –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä ---
@dp.message(StateFilter(GameState.WAITING_PLAYER))
async def process_player2(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        if message.forward_from:
            player2 = message.forward_from.id
        else:
            player2 = message.text.strip().lstrip("@")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ 2: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –±–æ—Ç
    if str(player2) == str((await bot.get_me()).id):
        await message.answer("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    game_id = str(random.randint(1000, 9999))
    active_games[game_id] = {
        "player1": message.from_user.id,
        "player2": player2,
        "used": [],
        "scores": {
            str(message.from_user.id): 0,
            str(player2): 0
        },
        "current_turn": player2,  # –ü–µ—Ä–≤—ã–π —Ö–æ–¥ —É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
        "last_move": datetime.now(),
        "started": False
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    try:
        invite_text = (
            f"üéÆ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É –ì–æ—Ä–æ–¥–∞</b>\n\n"
            f"–ò–≥—Ä–æ–∫ @{message.from_user.username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å!\n"
            f"ID –∏–≥—Ä—ã: <code>{game_id}</code>\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ /join_{game_id} —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
        )
        
        await bot.send_message(
            player2,
            invite_text,
            parse_mode="HTML"
        )
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É @{player2}\n"
            f"–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...\n\n"
            f"ID –∏–≥—Ä—ã: <code>{game_id}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ ID –∏–≥—Ä–æ–∫–∞"
        )
        await state.set_state(GameState.MAIN_MENU)

@dp.message(Command("join"))
async def join_game(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É"""
    try:
        game_id = message.text.split()[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join [ID_–∏–≥—Ä—ã]")
        return
    
    if game_id not in active_games:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return
    
    game = active_games[game_id]
    player2 = str(message.from_user.id)
    
    if player2 != str(game["player2"]):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º")
        return
    
    if game["started"]:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    game["started"] = True
    first_city = random.choice(CITIES)
    game["used"].append(first_city)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
    user_sessions[game["player1"]] = {"game_id": game_id}
    user_sessions[player2] = {"game_id": game_id}
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    await bot.send_message(
        game["player1"],
        f"üéÆ –ò–≥—Ä–∞ #{game_id} –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥: <b>{first_city}</b>\n"
        f"–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ - —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
        reply_markup=game_kb(),
        parse_mode="HTML"
    )
    
    await message.answer(
        f"üéÆ –ò–≥—Ä–∞ #{game_id} –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥: <b>{first_city}</b>\n"
        f"–í–∞—à —Ö–æ–¥! –ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>{get_last_letter(first_city).upper()}</b>",
        reply_markup=game_kb(),
        parse_mode="HTML"
    )
    
    await state.set_state(GameState.PLAYING_MULTI)

@dp.message(StateFilter(GameState.PLAYING_MULTI))
async def multiplayer_turn(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ"""
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    
    if not session or "game_id" not in session:
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return
    
    game_id = session["game_id"]
    game = active_games.get(game_id)
    
    if not game:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.set_state(GameState.MAIN_MENU)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    if str(user_id) != str(game["current_turn"]):
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    game["last_move"] = datetime.now()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∫–æ–º–∞–Ω–¥
    if message.text == "üè≥ –°–¥–∞—Ç—å—Å—è":
        winner_id = game["player2"] if user_id == game["player1"] else game["player1"]
        await end_multiplayer_game(game_id, winner_id, "–∏–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è")
        await state.set_state(GameState.MAIN_MENU)
        return
    
    if message.text == "‚ùì –ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?":
        if not game["used"]:
            await message.answer("–ï—â–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
            return
        
        last_city = game["used"][-1]
        info = await get_wiki_info(last_city)
        await message.answer(f"üìñ {last_city}\n{info}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
    city = message.text.strip().capitalize()
    last_city = game["used"][-1] if game["used"] else ""
    
    if city in game["used"]:
        await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª!")
        return
        
    if game["used"] and city[0].lower() != get_last_letter(last_city):
        await message.answer(
            f"–ù—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>{get_last_letter(last_city).upper()}</b>!",
            parse_mode="HTML"
        )
        return
        
    if city not in CITIES:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞!")
        return
    
    # –•–æ–¥ –ø—Ä–∏–Ω—è—Ç
    game["used"].append(city)
    game["scores"][str(user_id)] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –≥–æ—Ä–æ–¥–∞)
    if len(game["used"]) >= MAX_CITIES_IN_GAME:
        player1_score = game["scores"][str(game["player1"])]
        player2_score = game["scores"][str(game["player2"])]
        winner_id = game["player1"] if player1_score > player2_score else game["player2"]
        await end_multiplayer_game(game_id, winner_id, "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤")
        await state.set_state(GameState.MAIN_MENU)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    opponent_id = game["player2"] if user_id == game["player1"] else game["player1"]
    game["current_turn"] = opponent_id
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    await message.answer(
        f"‚úÖ <b>{city}</b> –ø—Ä–∏–Ω—è—Ç!\n"
        f"–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await bot.send_message(
        opponent_id,
        f"üèô –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–∑–≤–∞–ª: <b>{city}</b>\n"
        f"üìå –í–∞—à —Ö–æ–¥ –Ω–∞ –±—É–∫–≤—É <b>{get_last_letter(city).upper()}</b>\n"
        f"üìä –°—á–µ—Ç: –í—ã {game['scores'][str(opponent_id)]} - {game['scores'][str(user_id)]} –°–æ–ø–µ—Ä–Ω–∏–∫",
        reply_markup=game_kb(),
        parse_mode="HTML"
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def end_single_game(user_id: int, reason: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã"""
    session = user_sessions.get(user_id)
    if not session:
        return
    
    player_score = session["score"]["player"]
    bot_score = session["score"]["bot"]
    
    if player_score > bot_score:
        result = "–≤—ã –ø–æ–±–µ–¥–∏–ª–∏"
        update_stats(user_id, True)
    elif player_score < bot_score:
        result = "–±–æ—Ç –ø–æ–±–µ–¥–∏–ª"
        update_stats(user_id, False)
    else:
        result = "–Ω–∏—á—å—è"
    
    await bot.send_message(
        user_id,
        f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {reason}\n"
        f"üìä –°—á–µ—Ç: {player_score}-{bot_score}\n"
        f"üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
        reply_markup=main_menu_kb()
    )
    del user_sessions[user_id]

async def end_multiplayer_game(game_id: str, winner_id: int, reason: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π –∏–≥—Ä—ã"""
    game = active_games.get(game_id)
    if not game:
        return
    
    player1 = game["player1"]
    player2 = game["player2"]
    
    result_text = (
        f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {reason}\n\n"
        f"üìä –°—á–µ—Ç:\n"
        f"–ò–≥—Ä–æ–∫ 1: {game['scores'][str(player1)]}\n"
        f"–ò–≥—Ä–æ–∫ 2: {game['scores'][str(player2)]}\n\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–ò–≥—Ä–æ–∫ 1' if winner_id == player1 else '–ò–≥—Ä–æ–∫ 2'}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await bot.send_message(player1, result_text, reply_markup=main_menu_kb())
    await bot.send_message(player2, result_text, reply_markup=main_menu_kb())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if winner_id in (player1, player2):
        update_stats(winner_id, True)
        loser_id = player2 if winner_id == player1 else player1
        update_stats(loser_id, False)
    
    # –û—á–∏—Å—Ç–∫–∞
    if str(player1) in user_sessions:
        del user_sessions[str(player1)]
    if str(player2) in user_sessions:
        del user_sessions[str(player2)]
    if game_id in active_games:
        del active_games[game_id]

def update_stats(user_id: int, is_win: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    stats = user_stats.get(user_id, {"wins": 0, "losses": 0})
    if is_win:
        stats["wins"] += 1
    else:
        stats["losses"] += 1
    user_stats[user_id] = stats

async def check_timeouts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –≤ –∏–≥—Ä–∞—Ö"""
    while True:
        await asyncio.sleep(10)
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∏–≥—Ä—ã
        for user_id, session in list(user_sessions.items()):
            if session.get("mode") != GameModes.SINGLE:
                continue
                
            time_passed = (now - session["last_move"]).seconds
            time_limit = DIFFICULTIES[session["difficulty"]]["time"]
            
            if time_passed > time_limit:
                await end_single_game(user_id, "–≤—Ä–µ–º—è –≤—ã—à–ª–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
        for game_id, game in list(active_games.items()):
            if not game.get("started"):
                continue
                
            time_passed = (now - game["last_move"]).seconds
            if time_passed > 120:  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ö–æ–¥
                inactive_player = game["current_turn"]
                active_player = game["player2"] if inactive_player == game["player1"] else game["player1"]
                await end_multiplayer_game(game_id, active_player, "–≤—Ä–µ–º—è –≤—ã—à–ª–æ")

# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    asyncio.create_task(check_timeouts())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")